[
  // NAVIGATION
  {
    "command": "workbench.action.navigateLeft",
    "key": "ctrl-h"
  },
  {
    "command": "workbench.action.navigateRight",
    "key": "ctrl-l"
  },
  {
    "command": "workbench.action.navigateUp",
    "key": "ctrl-k"
  },
  {
    "command": "workbench.action.navigateDown",
    "key": "ctrl-j"
  },
  {
    "command": "workbench.action.quickOpen",
    "key": "space f f",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "workbench.action.showAllSymbols",
    "key": "space f t",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "workbench.action.showAllEditors",
    "key": "space f b",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "workbench.action.gotoSymbol",
    "key": "space f o",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "workbench.action.findInFiles",
    "key": "space f s",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "workbench.action.closeActiveEditor",
    "key": "space q",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "workbench.action.files.save",
    "key": "space w",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "workbench.action.splitEditorRight",
    "key": "space v",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "workbench.action.splitEditorDown",
    "key": "space s",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "editor.action.goToTypeDefinition",
    "key": "space g d",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "editor.action.goToImplementation",
    "key": "space g i",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "editor.action.goToReferences",
    "key": "space g r",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "args": {
      "commands": [
        "workbench.view.scm",
        "workbench.scm.focus"
      ]
    },
    "command": "runCommands",
    "key": "space g g",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "editor.action.addSelectionToNextFindMatch",
    "key": "ctrl-n",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "workbench.action.terminal.new",
    "key": "ctrl+shift+n",
    "when": "terminalFocus"
  },
  {
    "command": "workbench.action.terminal.kill",
    "key": "ctrl+shift+w",
    "when": "terminalFocus"
  },
  // FILE TREE EXPLORER
  {
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.files.action.focusFilesExplorer"
      ]
    },
    "command": "runCommands",
    "key": "space e",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus"
  },
  {
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "command": "runCommands",
    "key": "space e",
    "when": "sideBarFocus && !inputFocus"
  },
  {
    "command": "workbench.action.toggleSidebarVisibility",
    "key": "space e",
    "when": "vim.mode == 'Normal' && editorTextFocus && foldersViewVisible"
  },
  {
    "command": "workbench.action.nextEditorInGroup",
    "key": "tab",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus)"
  },
  {
    "command": "workbench.action.previousEditorInGroup",
    "key": "shift-tab",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus)"
  },
  {
    "command": "explorer.newFile",
    "key": "n",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "renameFile",
    "key": "r",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "filesExplorer.copy",
    "key": "c",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "filesExplorer.cut",
    "key": "x",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "filesExplorer.paste",
    "key": "p",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.newFile",
    "key": "a",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.newFolder",
    "key": "shift-a",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.openToSide",
    "key": "s",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "args": {
      "commands": [
        "workbench.action.splitEditorDown",
        "explorer.openAndPassFocus",
        "workbench.action.closeOtherEditors"
      ]
    },
    "command": "runCommands",
    "key": "v",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "command": "explorer.openAndPassFocus",
    "key": "enter",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "command": "list.toggleExpand",
    "key": "enter",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && explorerResourceIsFolder && !inputFocus"
  },
  // Coding
  {
    "command": "editor.action.moveLinesDownAction",
    "key": "shift-j",
    "when": "vim.mode == 'VisualLine' && editorTextFocus"
  },
  {
    "command": "editor.action.moveLinesUpAction",
    "key": "shift-k",
    "when": "vim.mode == 'VisualLine' && editorTextFocus"
  },
  {
    "command": "editor.action.showHover",
    "key": "shift-k",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "editor.action.codeAction",
    "key": "space c a",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "editor.action.rename",
    "key": "space r r",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "testing.runAll",
    "key": "space t a",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "testing.runAtCursor",
    "key": "space t r",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "testing.debugAtCursor",
    "key": "space t d",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  {
    "command": "workbench.view.testing.focus",
    "key": "space t s",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },
  // EXTRA
  {
    "command": "workbench.action.toggleZenMode",
    "key": "ctrl+z"
  },
  {
    "key": "ctrl+shift+5",
    "command": "editor.emmet.action.matchTag"
  },
  {
    "key": "ctrl+n",
    "command": "cursorDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+p",
    "command": "cursorUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenNavigateNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigatePrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "showNextParameterHint",
    "when": "editorTextFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+p",
    "command": "showPrevParameterHint",
    "when": "editorTextFocus && parameterHintsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextQuickFix",
    "when": "editorFocus && quickFixWidgetVisible"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible"
  }
]

